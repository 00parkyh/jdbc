MVC (Model - View - Controller) 패턴
컴퓨터 공학에서 소프트웨어 설계와 아키텍처를 위한 디자인 패턴중 하나이다.
사용자 인터페이스를 가진 응용프로그램에 사용된다. 데이터, 프레젠테이션, 프로세싱을 서로 분리한다.

 - 설계원칙
Model : 데이터와 비즈니스 로직을 처리한다. 데이터의 저장, 검색, 수정 등에 집중하며, 뷰와 컨트롤로에 대한 정보는 없다.
View :  사용자 인터페이스를 담당하며 모델에서 전달받은 데이터를 화면에 표시한다.
Controller : 사용자의 입력을 받아 모델과 뷰 사이에서 통신을 관리한다, 데이터를 처리한 후 결과를 뷰에 전달한다.

VO (Value Object) : 값을 표현하기 위한 객체로, 특정 로직을 갖기 보다는 관려된 데이터들의 묶음을 하나의 단위로 다루기 위해 사용된다.
                    @ 주로 계층간의 데이터 전달을 위해 사용된다.

 jdbc_boards 를 통한 mvc 패턴 공부
 model -> BoardDAO.java
 view -> Main.java
 Controller -> BoarMenu.java
 VO -? Board

 먼저 jdbc_boards 에 대해 분석해보자면 boardtable 이라는 테이블을 이용해 번호,제목,내용,작성자,작성날짜 데이터를 관리하는 프로그램이다
 BoardDAO.java 를 통해 데이터를 삽입, 조회, 수정 등 비즈니스 로직을 처리한다. (Model)
 Main.java 를 통해 사용자에게 메뉴를 보여줍니다.
 BoardMenu.java 를 통해 사용자로부터 데이터의 값들을 입력 받는다.

 Connection 인터페이스 : 데이터베이스의 연결을 나타내는 인터페이스이다.
  주요 역할
  - 1. SQL 실행 통로 제공 : statement, PreparedStatement,CallableStatement 같은 객체를 생성하여,
       DB에 SQL을 전달할 수 있는 통로를 엽니다.

  - 2. 트랜잭션 관리 : 여러개의 SQL 작업을 하나의 논리적인 단위로 묶어 처리하는 트랜잭션을 제어한다.
                     commit() : 모든 작업이 성공했을때 변경사항을 영구적으로 반영한다.
                     rollback() : 작업중 하나라도 실패하면 이전 상태로 되돌린다.
                     setAutoCommit() : SQL문이 실행될때마다 자동으로 커밋할지 여부를 설정한다.

PreparedStatement : 자바에서 데이터베이스 작업을 수행하기 위한 jdbc api의 핵심 인터페이스
    - execute() : boolean 타입 리턴 , 쿼리를 실행한 뒤, 리턴되는 결과가 resultset 객체면 true int형 정수거나 없다면 false
    - executeUpdate() : int 타입 리턴, 쿼리를 실핸한 뒤, 적용된 행의 개수를 리턴
    - executeQuery() : ResultSet 클래스 리턴, 쿼리를 실행한 뒤, 조회된 결과를 ResultSet 에 담아 테이블 형태로 리턴